#pragma once

//////////////////////////////////////////////////////////////////////////
/// Includes
//////////////////////////////////////////////////////////////////////////

#include <OrangeAudioEngineDefs.h>
#include <OAESource.h>


//////////////////////////////////////////////////////////////////////////
/// COAEAudioFile
//////////////////////////////////////////////////////////////////////////

// abstract base class for all audio file types
class IOAEFile : public IOAESource
{
public:

    //////////////////////////////////////////////////////////////////////////

    IOAEFile( const OASourceId& anId, const std::string& aFilePath, bool anIsStreaming = false );
    virtual ~IOAEFile();

    //////////////////////////////////////////////////////////////////////////

    virtual bool            Open()              = 0;
    virtual void            Close()             = 0;

    virtual bool            LoadWaveFormat()    = 0;

    //////////////////////////////////////////////////////////////////////////

    const XAUDIO2_BUFFER*   GetAudioBuffer() const;
    const OAUInt8*          GetAudioData() const;


protected:

    //////////////////////////////////////////////////////////////////////////

    std::string     m_filePath;
	std::fstream	m_fileStream;

    OAUInt32        m_dataOffset;

    XAUDIO2_BUFFER  m_xaudioBuffer;
    OAUInt8*        m_dataBuffer;
};

//////////////////////////////////////////////////////////////////////////