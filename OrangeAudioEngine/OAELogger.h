#pragma once

//////////////////////////////////////////////////////////////////////////
/// Includes
//////////////////////////////////////////////////////////////////////////

#include "OrangeAudioEngineDefs.h"


//////////////////////////////////////////////////////////////////////////
/// Defines
//////////////////////////////////////////////////////////////////////////

#define OAELog COAELogger::GetInstance()


//////////////////////////////////////////////////////////////////////////
/// Enumerations
//////////////////////////////////////////////////////////////////////////

enum class ELogMesageType : OAInt8
{
    ELogMessageType_Info,
    ELogMessageType_Warning,
    ELogMessageType_Error
};


//////////////////////////////////////////////////////////////////////////
/// COAELogger
//////////////////////////////////////////////////////////////////////////

// a simple singleton logger that outputs messages to a file
class COAELogger
{
public:

    //////////////////////////////////////////////////////////////////////////

    ~COAELogger();

    //////////////////////////////////////////////////////////////////////////

    void                LogMessage( ELogMesageType aMessageType, std::string& aMessage );
    void                LogMessage( ELogMesageType aMessageType, const char* aFormat, ... );

    //////////////////////////////////////////////////////////////////////////

    static COAELogger*  GetInstance();
    static void         Destroy();


private:

    //////////////////////////////////////////////////////////////////////////

    COAELogger();

    //////////////////////////////////////////////////////////////////////////

    const char*         GetMessageTypeString( ELogMesageType aMessageType ) const;

    //////////////////////////////////////////////////////////////////////////

    std::unordered_map<ELogMesageType, const char*> m_messageTypeToString;

    //////////////////////////////////////////////////////////////////////////

    static COAELogger*                              m_instance;
    static std::ofstream                            m_logFile;
};

//////////////////////////////////////////////////////////////////////////
