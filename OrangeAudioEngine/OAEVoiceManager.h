#pragma once

//////////////////////////////////////////////////////////////////////////
/// Includes
//////////////////////////////////////////////////////////////////////////

#include <OrangeAudioEngineDefs.h>


//////////////////////////////////////////////////////////////////////////
/// Forward Declarations
//////////////////////////////////////////////////////////////////////////

class COAESourceManager;
class COAEVoice;


//////////////////////////////////////////////////////////////////////////
/// COAEVoiceManager
//////////////////////////////////////////////////////////////////////////

// manages all of the active voices in the engine
class COAEVoiceManager
{
public:
    
    //////////////////////////////////////////////////////////////////////////

    COAEVoiceManager( COAESourceManager* aSourceManager );
    ~COAEVoiceManager();

    //////////////////////////////////////////////////////////////////////////

    OAVoiceId   CreateVoice( const OASourceId& aSourceId );
    void        DestroyVoice( const OAVoiceId& aVoiceId );


private:

    //////////////////////////////////////////////////////////////////////////

    typedef std::shared_ptr<COAEVoice>                  OAEVoicePtr;
    typedef std::unordered_map<OAVoiceId, OAEVoicePtr>  OAEVoiceMap;

    //////////////////////////////////////////////////////////////////////////

    COAESourceManager*  m_sourceManager;
    OAEVoiceMap         m_voices;
    OAVoiceId           m_nextVoiceId;
};

//////////////////////////////////////////////////////////////////////////