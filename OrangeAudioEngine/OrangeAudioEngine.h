#pragma once

//////////////////////////////////////////////////////////////////////////
/// Includes
//////////////////////////////////////////////////////////////////////////

#include <OrangeAudioEngineDefs.h>

#include <unordered_map>
#include <memory>


//////////////////////////////////////////////////////////////////////////
/// Forward Declarations
//////////////////////////////////////////////////////////////////////////

struct  IXAudio2;
struct  IXAudio2MasteringVoice;

class   COAEAudioObject;


//////////////////////////////////////////////////////////////////////////
/// COrangeAudioEngine
//////////////////////////////////////////////////////////////////////////

// the base class that manages all voices and audio graphs
class ORANGEAUDIOENGINE_DLL COrangeAudioEngine
{
public :

    //////////////////////////////////////////////////////////////////////////

    COrangeAudioEngine();
    ~COrangeAudioEngine();

    //////////////////////////////////////////////////////////////////////////

    bool			Initialize();
    void			Uninitialize();

    //////////////////////////////////////////////////////////////////////////

    bool			RegisterEmitter( const OAUInt64& anId );
    void			UnregisterEmitter( const OAUInt64& anId );

    bool			RegisterListener( const OAUInt64& anId );
    void			UnregisterListener( const OAUInt64& anId );

	//////////////////////////////////////////////////////////////////////////

	OAInt32			PlaySound( const OAUInt64& anEmitterId, const std::string& anAudioFile );


private:

	//////////////////////////////////////////////////////////////////////////

	OAObjectPtr		GetEmitter( const OAUInt64& anEmitterId );

    //////////////////////////////////////////////////////////////////////////

    void Cleanup();

    //////////////////////////////////////////////////////////////////////////

    IXAudio2*               m_xaudioInterface;
    IXAudio2MasteringVoice* m_xaudioMasteringVoice;
	X3DAUDIO_HANDLE			m_x3DInstance;

    bool                    m_initialized;

    // disable warnings about stl containers being inaccessible outside the DLL, these will only be used internally 
#pragma warning( push )
#pragma warning( disable: 4251 )
    OAObjectMap             m_emitters;
    OAObjectMap             m_listeners;
#pragma warning( pop )
};

//////////////////////////////////////////////////////////////////////////
